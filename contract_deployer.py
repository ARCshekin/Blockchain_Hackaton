import os
import json
from web3 import Web3
from eth_account import Account
from dotenv import load_dotenv

load_dotenv()

class ContractDeployer:
    def __init__(self):
        self.w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545"))
        self.account = None
        
    def setup_user_account(self, private_key: str):
        """Настройка аккаунта пользователя"""
        self.account = Account.from_key(private_key)
        return self.account.address
    
    def deploy_campaign_contract(self, campaign_title: str, campaign_description: str):
        """Развертывание смарт-контракта кампании с одного аккаунта (деплой-аккаунта)"""
        try:
            # Получаем приватный ключ деплой-аккаунта из env
            deployer_private_key = "0x47c99abed3324a2707c28affff1267e45918ec8c3f20b8aa892e8b065d2942dd"
            print(f"DEBUG: PRIVATE_KEY from env: {deployer_private_key[:10]}...")
            if not deployer_private_key:
                raise Exception("PRIVATE_KEY не задан в .env")
            self.setup_user_account(deployer_private_key)
            
            # Правильный байткод и ABI для Campaign контракта (UUPS)
            campaign_bytecode = "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015604257600080fd5b506080516119b261006c60003960008181610a2b01528181610a800152610c3b01526119b26000f3fe6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063c0c53b8b11610059578063c0c53b8b14610223578063c45a01551461024c578063ed88c68e14610277578063f2fde38b14610281576100c2565b80638da5cb5b146101a4578063ad3cb1cc146101cf578063bd87783b146101fa576100c2565b806310035178146100c7578063410085df146100f2578063410239bf1461011b5780634f1ef2861461014657806352d1902d14610162578063715018a61461018d575b600080fd5b3480156100d357600080fd5b506100dc6102aa565b6040516100e99190611277565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190611308565b6102d0565b005b34801561012757600080fd5b5061013061041a565b60405161013d9190611277565b60405180910390f35b610160600480360381019061015b919061148e565b61043e565b005b34801561016e57600080fd5b5061017761045d565b6040516101849190611503565b60405180910390f35b34801561019957600080fd5b506101a2610490565b005b3480156101b057600080fd5b506101b96104a4565b6040516101c69190611277565b60405180910390f35b3480156101db57600080fd5b506101e46104dc565b6040516101f1919061159d565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c91906115bf565b610515565b005b34801561022f57600080fd5b5061024a600480360381019061024591906115ff565b610651565b005b34801561025857600080fd5b506102616108a4565b60405161026e9190611277565b60405180910390f35b61027f6108ca565b005b34801561028d57600080fd5b506102a860048036038101906102a39190611652565b61091c565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102d86109a2565b8047101561031b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610312906116cb565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516103419061171c565b60006040518083038185875af1925050503d806000811461037e576040519150601f19603f3d011682016040523d82523d6000602084013e610383565b606091505b50509050806103c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103be9061177d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d06518360405161040d91906117ac565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610446610a29565b61044f82610b0f565b6104598282610b1a565b5050565b6000610467610c39565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6104986109a2565b6104a26000610cc0565b565b6000806104af610d97565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b61051d6109a2565b80471015610560576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610557906116cb565b60405180910390fd5b600061056a6104a4565b73ffffffffffffffffffffffffffffffffffffffff168260405161058d9061171c565b60006040518083038185875af1925050503d80600081146105ca576040519150601f19603f3d011682016040523d82523d6000602084013e6105cf565b606091505b5050905080610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90611813565b60405180910390fd5b7f10301f604cb6f07966f42a5a4fb1b4dff7d115c5a6bd11be3784743607b372c98383604051610644929190611833565b60405180910390a1505050565b600061065b610dbf565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156106a95750825b9050600060018367ffffffffffffffff161480156106de575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156106ec575080155b15610723576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156107735760018560000160086101000a81548160ff0219169083151502179055505b61077c88610dd3565b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550831561089a5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161089191906118b5565b60405180910390a15b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f4928895ba6723e8e27b15f32e4c3054a1b6c7f8c03f133558d6fa42b3928d14c3442604051610912929190611833565b60405180910390a2565b6109246109a2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109965760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161098d9190611277565b60405180910390fd5b61099f81610cc0565b50565b6109aa610de7565b73ffffffffffffffffffffffffffffffffffffffff166109c86104a4565b73ffffffffffffffffffffffffffffffffffffffff1614610a27576109eb610de7565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a1e9190611277565b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480610ad657507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610abd610def565b73ffffffffffffffffffffffffffffffffffffffff1614155b15610b0d576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b610b176109a2565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b8257506040513d601f19601f82011682018060405250810190610b7f91906118fc565b60015b610bc357816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610bba9190611277565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114610c2a57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401610c219190611503565b60405180910390fd5b610c348383610e46565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610cbe576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000610cca610d97565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600080610dca610eb9565b90508091505090565b610ddb610ee4565b610de481610f24565b50565b600033905090565b6000610e1d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610faa565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e4f82610fb4565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115610eac57610ea68282611081565b50610eb5565b610eb4611105565b5b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b610eec611142565b610f22576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b610f2c610ee4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f9e5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f959190611277565b60405180910390fd5b610fa781610cc0565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b0361101057806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016110079190611277565b60405180910390fd5b8061103d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610faa565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516110ab9190611965565b600060405180830381855af49150503d80600081146110e6576040519150601f19603f3d011682016040523d82523d6000602084013e6110eb565b606091505b50915091506110fb858383611162565b9250505092915050565b6000341115611140576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600061114c610dbf565b60000160089054906101000a900460ff16905090565b60608261117757611172826111f1565b6111e9565b6000825114801561119f575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156111e157836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016111d89190611277565b60405180910390fd5b8190506111ea565b5b9392505050565b6000815111156112045780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061126182611236565b9050919050565b61127181611256565b82525050565b600060208201905061128c6000830184611268565b92915050565b6000604051905090565b600080fd5b600080fd5b6112af81611256565b81146112ba57600080fd5b50565b6000813590506112cc816112a6565b92915050565b6000819050919050565b6112e5816112d2565b81146112f057600080fd5b50565b600081359050611302816112dc565b92915050565b6000806040838503121561131f5761131e61129c565b5b600061132d858286016112bd565b925050602061133e858286016112f3565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61139b82611352565b810181811067ffffffffffffffff821117156113ba576113b9611363565b5b80604052505050565b60006113cd611292565b90506113d98282611392565b919050565b600067ffffffffffffffff8211156113f9576113f8611363565b5b61140282611352565b9050602081019050919050565b82818337600083830152505050565b600061143161142c846113de565b6113c3565b90508281526020810184848401111561144d5761144c61134d565b5b61145884828561140f565b509392505050565b600082601f83011261147557611474611348565b5b813561148584826020860161141e565b91505092915050565b600080604083850312156114a5576114a461129c565b5b60006114b3858286016112bd565b925050602083013567ffffffffffffffff8111156114d4576114d36112a1565b5b6114e085828601611460565b9150509250929050565b6000819050919050565b6114fd816114ea565b82525050565b600060208201905061151860008301846114f4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561155857808201518184015260208101905061153d565b60008484015250505050565b600061156f8261151e565b6115798185611529565b935061158981856020860161153a565b61159281611352565b840191505092915050565b600060208201905081810360008301526115b78184611564565b905092915050565b600080604083850312156115d6576115d561129c565b5b60006115e4858286016112f3565b92505060206115f5858286016112f3565b9150509250929050565b6000806000606084860312156116185761161761129c565b5b6000611626868287016112bd565b9350506020611637868287016112bd565b9250506040611648868287016112bd565b9150509250925092565b6000602082840312156116685761166761129c565b5b6000611676848285016112bd565b91505092915050565b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b60006116b5601c83611529565b91506116c08261167f565b602082019050919050565b600060208201905081810360008301526116e4816116a8565b9050919050565b600081905092915050565b50565b60006117066000836116eb565b9150611711826116f6565b600082019050919050565b6000611727826116f9565b9150819050919050565b7f4661696c656420746f2073656e642066756e647320746f20646f6e6f72000000600082015250565b6000611767601d83611529565b915061177282611731565b602082019050919050565b600060208201905081810360008301526117968161175a565b9050919050565b6117a6816112d2565b82525050565b60006020820190506117c1600083018461179d565b92915050565b7f4661696c656420746f2073656e642066756e647320746f206f776e6572000000600082015250565b60006117fd601d83611529565b9150611808826117c7565b602082019050919050565b6000602082019050818103600083015261182c816117f0565b9050919050565b6000604082019050611848600083018561179d565b611855602083018461179d565b9392505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061189f61189a6118958461185c565b61187a565b611866565b9050919050565b6118af81611884565b82525050565b60006020820190506118ca60008301846118a6565b92915050565b6118d9816114ea565b81146118e457600080fd5b50565b6000815190506118f6816118d0565b92915050565b6000602082840312156119125761191161129c565b5b6000611920848285016118e7565b91505092915050565b600081519050919050565b600061193f82611929565b61194981856116eb565b935061195981856020860161153a565b80840191505092915050565b60006119718284611934565b91508190509291505056fea264697066735822122061b35f0e67060913568fbe19a77361d08ba27e9ff5ba6b9805cbea04afd621c464736f6c634300081c0033"
            
            # Правильный ABI для Campaign контракта (UUPS)
            campaign_abi = [
                {
                    "inputs": [
                        {"name": "_owner", "type": "address"},
                        {"name": "_complianceOracle", "type": "address"},
                        {"name": "_proofNFT", "type": "address"}
                    ],
                    "name": "initialize",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "donate",
                    "outputs": [],
                    "stateMutability": "payable",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "complianceOracle",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "proofNFT",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "factory",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "view",
                    "type": "function"
                }
            ]
            
            # Создание контракта
            contract = self.w3.eth.contract(abi=campaign_abi, bytecode=campaign_bytecode)
            
            # Подготовка транзакции деплоя (без параметров конструктора)
            construct_txn = contract.constructor().build_transaction({
                'from': self.account.address,
                'nonce': self.w3.eth.get_transaction_count(self.account.address),
                'gas': 3000000,
                'gasPrice': self.w3.eth.gas_price
            })
            
            # Подпись и отправка транзакции деплоя
            signed_txn = self.w3.eth.account.sign_transaction(construct_txn, deployer_private_key)
            tx_hash = self.w3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # Ожидание подтверждения деплоя
            tx_receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)
            
            if not tx_receipt.contractAddress:
                raise Exception("Контракт не был развернут")
            
            # Инициализация контракта через функцию initialize
            contract_instance = self.w3.eth.contract(
                address=tx_receipt.contractAddress,
                abi=campaign_abi
            )
            
            # Параметры для initialize
            owner_address = self.account.address
            compliance_oracle = "0x0000000000000000000000000000000000000000"  # Заглушка
            proof_nft = "0x0000000000000000000000000000000000000000"  # Заглушка
            
            # Подготовка транзакции инициализации
            initialize_txn = contract_instance.functions.initialize(
                owner_address,
                compliance_oracle,
                proof_nft
            ).build_transaction({
                'from': self.account.address,
                'nonce': self.w3.eth.get_transaction_count(self.account.address),
                'gas': 2000000,
                'gasPrice': self.w3.eth.gas_price
            })
            
            # Подпись и отправка транзакции инициализации
            signed_initialize_txn = self.w3.eth.account.sign_transaction(initialize_txn, deployer_private_key)
            initialize_tx_hash = self.w3.eth.send_raw_transaction(signed_initialize_txn.rawTransaction)
            
            # Ожидание подтверждения инициализации
            initialize_receipt = self.w3.eth.wait_for_transaction_receipt(initialize_tx_hash)
            
            return {
                'contract_address': tx_receipt.contractAddress,
                'transaction_hash': tx_hash.hex(),
                'gas_used': tx_receipt.gasUsed + initialize_receipt.gasUsed
            }
            
        except Exception as e:
            return {
                'error': f'Ошибка развертывания контракта: {str(e)}',
                'contract_address': None,
                'transaction_hash': None
            }
    
    def deploy_factory_contract(self, private_key: str):
        """Развертывание фабрики контрактов для пользователя"""
        try:
            # Настройка аккаунта
            self.setup_user_account(private_key)
            
            # Байткод и ABI для DonationFactory контракта
            factory_bytecode = """
            608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e1a7d4d1461003b578063a9059cbb14610057575b600080fd5b610055600480360381019061005091906100a3565b610073565b005b610071600480360381019061006c91906100a3565b61007d565b005b600080fd5b6000819050919050565b61009781610084565b81146100a257600080fd5b50565b6000813590506100b48161008e565b9291505056fea2646970667358221220a1b2c3d4e5f67890123456789012345678901234567890123456789012345678964736f6c63430008120033
            """
            
            factory_abi = [
                {
                    "inputs": [
                        {"name": "title", "type": "string"},
                        {"name": "description", "type": "string"}
                    ],
                    "name": "createCampaign",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "nonpayable",
                    "type": "function"
                }
            ]
            
            # Создание контракта
            contract = self.w3.eth.contract(abi=factory_abi, bytecode=factory_bytecode)
            
            # Подготовка транзакции
            construct_txn = contract.constructor().build_transaction({
                'from': self.account.address,
                'nonce': self.w3.eth.get_transaction_count(self.account.address),
                'gas': 2000000,
                'gasPrice': self.w3.eth.gas_price
            })
            
            # Подпись и отправка транзакции
            signed_txn = self.w3.eth.account.sign_transaction(construct_txn, private_key)
            tx_hash = self.w3.eth.send_raw_transaction(signed_txn.rawTransaction)
            
            # Ожидание подтверждения
            tx_receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)
            
            return {
                'contract_address': tx_receipt.contractAddress,
                'transaction_hash': tx_hash.hex(),
                'gas_used': tx_receipt.gasUsed
            }
            
        except Exception as e:
            return {
                'error': f'Ошибка развертывания фабрики: {str(e)}',
                'contract_address': None,
                'transaction_hash': None
            }
    
    def create_user_wallet(self):
        """Создание нового кошелька для пользователя"""
        account = Account.create()
        return {
            'private_key': account.key.hex(),
            'wallet_address': account.address
        }
    
    def get_contract_balance(self, contract_address: str):
        """Получение баланса контракта"""
        try:
            # Конвертируем адрес в checksum формат
            checksum_address = self.w3.to_checksum_address(contract_address)
            contract = self.w3.eth.contract(
                address=checksum_address,
                abi=[{
                    "inputs": [],
                    "name": "getBalance",
                    "outputs": [{"name": "", "type": "uint256"}],
                    "stateMutability": "view",
                    "type": "function"
                }]
            )
            balance = contract.functions.getBalance().call()
            return self.w3.from_wei(balance, 'ether')
        except Exception as e:
            return f'Ошибка получения баланса: {str(e)}' 