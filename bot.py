import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
from db import SessionLocal, User

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = "https://0ff1b77dcc4c.ngrok-free.app"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
user_tokens = {}

class RegisterState(StatesGroup):
    waiting_for_username = State()
    waiting_for_password = State()

class WalletState(StatesGroup):
    waiting_for_seed_phrase = State()

class CampaignState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()

class DonateState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_campaign = State()

# --- Inline Keyboard for main menu ---
def get_main_menu_keyboard(user_id=None):
    from aiogram.types import WebAppInfo
    keyboard = [
        [InlineKeyboardButton(text="–ö–æ—à–µ–ª—ë–∫", callback_data="wallet")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="campaign")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π", callback_data="campaigns")],
        [InlineKeyboardButton(
            text="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å",
            web_app=WebAppInfo(url=f"{BACKEND_URL}/donate?user_id={user_id}" if user_id else f"{BACKEND_URL}/donate")
        )],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="status")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend ---
def is_registered(user_id: int) -> bool:
    with SessionLocal() as db:
        user = db.query(User).filter(User.telegram_id == str(user_id)).first()
        print(f"DEBUG is_registered: user_id={user_id}, found={user}, username={getattr(user, 'username', None)}, password_hash={getattr(user, 'password_hash', None)}")
        return user is not None and user.username and user.password_hash

@router.message(Command("start"))
async def send_welcome(message: Message):
    try:
        resp = requests.get(f"{BACKEND_URL}/wallet/info/{message.from_user.id}")
        if resp.status_code in (200, 400):
            welcome_text = (
                "üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
            )
        else:
            welcome_text = (
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Charity Bot!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /register –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."
            )
    except Exception:
        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Charity Bot!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /register –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."
        )
    sent_msg = await message.answer(welcome_text, reply_markup=get_main_menu_keyboard(user_id=message.from_user.id))
    try:
        await message.bot.pin_chat_message(message.chat.id, sent_msg.message_id, disable_notification=True)
    except Exception:
        pass  # –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(RegisterState.waiting_for_username)

@router.message(RegisterState.waiting_for_username)
async def register_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegisterState.waiting_for_password)

@router.message(RegisterState.waiting_for_password)
async def register_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    username = user_data['username']
    password = message.text.strip()
    data = {
        "telegram_id": str(message.from_user.id),
        "username": username,
        "password": password
    }
    try:
        resp = requests.post(f"{BACKEND_URL}/register/", json=data)
        if resp.status_code == 200:
            await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=get_main_menu_keyboard(user_id=message.from_user.id))
        else:
            error_msg = resp.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(Command("wallet"))
async def wallet_start(message: Message, state: FSMContext):
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ seed phrase –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:")
    await state.set_state(WalletState.waiting_for_seed_phrase)

@router.message(WalletState.waiting_for_seed_phrase)
async def create_wallet(message: Message, state: FSMContext):
    user_id = message.from_user.id
    seed_phrase = message.text.strip()
    data = {
        "telegram_id": str(user_id),
        "seed_phrase": seed_phrase
    }
    try:
        resp = requests.post(f"{BACKEND_URL}/wallet/create/", json=data)
        if resp.status_code == 200:
            await message.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.")
        else:
            error_msg = resp.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {error_msg}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(Command("campaign"))
async def campaign_start(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:")
    await state.set_state(CampaignState.waiting_for_title)

@router.message(CampaignState.waiting_for_title)
async def campaign_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:")
    await state.set_state(CampaignState.waiting_for_description)

@router.message(CampaignState.waiting_for_description)
async def campaign_description(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    title = user_data['title']
    description = message.text.strip()
    data = {
        'title': title,
        'description': description,
        'telegram_id': str(user_id)
    }
    
    try:
        resp = requests.post(f"{BACKEND_URL}/campaigns/telegram/", json=data)
        if resp.status_code == 200:
            response_data = resp.json()
            await message.answer(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                               f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                               f"ID: {response_data.get('id')}\n"
                               f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {response_data.get('contract_address', 'N/A')}")
        else:
            error_msg = resp.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {error_msg}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(Command("donate"))
async def donate_start(message: Message, state: FSMContext):
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –≤ wei:")
    await state.set_state(DonateState.waiting_for_amount)

@router.message(DonateState.waiting_for_amount)
async def donate_amount(message: Message, state: FSMContext):
    try:
        amount_wei = int(message.text)
        await state.update_data(amount_wei=amount_wei)
        await message.answer("üéØ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:")
        await state.set_state(DonateState.waiting_for_campaign)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        await state.clear()

@router.message(DonateState.waiting_for_campaign)
async def donate_campaign(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    amount_wei = user_data['amount_wei']
    campaign_id = message.text.strip()
    data = {
        "donor": str(user_id),
        "amount_wei": amount_wei,
        "campaign_id": campaign_id
    }
    try:
        resp = requests.post(f"{BACKEND_URL}/donate", json=data)
        if resp.status_code == 200:
            response_data = resp.json()
            tx_hash = response_data.get("tx_hash", "N/A")
            risk_score = response_data.get("risk_score", "N/A")
            await message.answer(f"‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                                 f"Tx hash: {tx_hash}\n"
                                 f"Risk score: {risk_score}\n"
                                 f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /status {tx_hash}")
        else:
            try:
                error_msg = resp.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            except:
                error_msg = resp.text
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {error_msg}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(Command("balance"))
async def check_balance(message: Message):
    user_id = message.from_user.id
    if not is_registered(user_id):
        reg_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
        )
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_kb)
        return
    try:
        resp = requests.get(f"{BACKEND_URL}/balance/{user_id}")
        if resp.status_code == 200:
            balance_data = resp.json()
            balance_eth = balance_data.get('balance_eth', 0)
            await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_eth:.6f} ETH")
        else:
            error_msg = resp.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {error_msg}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("status"))
async def handle_status(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: /status <tx_hash>")
        return
    tx_hash = args[1].strip()
    try:
        resp = requests.get(f"{BACKEND_URL}/status/{tx_hash}")
        if resp.status_code == 200:
            status = resp.json()
            await message.answer(f"üìä –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n{status}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {resp.text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("campaigns"))
async def list_campaigns(message: Message):
    try:
        resp = requests.get(f"{BACKEND_URL}/campaigns/")
        if resp.status_code == 200:
            campaigns = resp.json()
            if campaigns:
                campaign_list = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π:\n\n"
                for campaign in campaigns:
                    campaign_list += f"üéØ ID: {campaign['id']}\n"
                    campaign_list += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {campaign['title']}\n"
                    campaign_list += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {campaign['description']}\n"
                    campaign_list += "‚îÄ" * 30 + "\n"
                await message.answer(campaign_list)
            else:
                await message.answer("üìã –ö–∞–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π: {resp.text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- Callback handlers for main menu ---
@router.callback_query(F.data == "wallet")
async def wallet_callback(call: CallbackQuery, state: FSMContext):
    print(f"DEBUG CALLBACK wallet: from_user.id={call.from_user.id}, data={call.data}")
    user_id = call.from_user.id
    if not is_registered(user_id):
        reg_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
        )
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_kb)
        await call.answer()
        return
    await wallet_start(call.message, state)
    await call.answer()

@router.callback_query(F.data == "campaign")
async def campaign_callback(call: CallbackQuery, state: FSMContext):
    print(f"DEBUG CALLBACK campaign: from_user.id={call.from_user.id}, data={call.data}")
    user_id = call.from_user.id
    if not is_registered(user_id):
        reg_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
        )
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_kb)
        await call.answer()
        return
    await campaign_start(call.message, state)
    await call.answer()

@router.callback_query(F.data == "campaigns")
async def campaigns_callback(call: CallbackQuery):
    await list_campaigns(call.message)
    await call.answer()

@router.callback_query(F.data == "donate")
async def donate_callback(call: CallbackQuery, state: FSMContext):
    print(f"DEBUG CALLBACK donate: from_user.id={call.from_user.id}, data={call.data}")
    user_id = call.from_user.id
    if not is_registered(user_id):
        reg_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
        )
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_kb)
        await call.answer()
        return
    await donate_start(call.message, state)
    await call.answer()

@router.callback_query(F.data == "balance")
async def balance_callback(call: CallbackQuery):
    print(f"DEBUG CALLBACK balance: from_user.id={call.from_user.id}, data={call.data}")
    user_id = call.from_user.id
    if not is_registered(user_id):
        reg_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
        )
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_kb)
        await call.answer()
        return
    await check_balance(call.message)
    await call.answer()

@router.callback_query(F.data == "status")
async def status_callback(call: CallbackQuery):
    user_id = call.from_user.id
    if not is_registered(user_id):
        reg_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
        )
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_kb)
        await call.answer()
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        resp = requests.get(f"{BACKEND_URL}/donations/{user_id}")
        if resp.status_code == 200:
            donations = resp.json()
            if not donations:
                await call.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
                await call.answer()
                return
            # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            for d in donations:
                label = f"...{d['tx_hash'][-10:]}" if d['tx_hash'] else f"ID {d['id']} (–Ω–µ—Ç tx_hash)"
                callback_data = f"txstatus:{d['id']}"
                keyboard.append([InlineKeyboardButton(text=label, callback_data=callback_data)])
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:", reply_markup=markup)
        else:
            await call.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await call.answer()

@router.callback_query(F.data.startswith("txstatus:"))
async def txstatus_callback(call: CallbackQuery):
    await call.message.delete()
    user_id = call.from_user.id
    tx_id = call.data[len("txstatus:"):]
    try:
        resp = requests.get(f"{BACKEND_URL}/donations/{user_id}")
        if resp.status_code == 200:
            donations = resp.json()
            tx = next((d for d in donations if str(d['id']) == tx_id), None)
            if not tx:
                await call.message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu_keyboard(user_id=call.from_user.id))
                await call.answer()
                return
            tx_hash = tx.get('tx_hash')
            if not tx_hash:
                await call.message.answer("–î–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ—Ç tx_hash, —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_menu_keyboard(user_id=call.from_user.id))
                await call.answer()
                return
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            resp2 = requests.get(f"{BACKEND_URL}/status/{tx_hash}")
            if resp2.status_code == 200:
                status = resp2.json()
                await call.message.answer(f"üìä –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ...{tx_hash[-10:]}:\n{'\n'.join([f'{k}: {v}' for k, v in status.items()])}", reply_markup=get_main_menu_keyboard(user_id=call.from_user.id))
            else:
                await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {resp2.text}", reply_markup=get_main_menu_keyboard(user_id=call.from_user.id))
        else:
            await call.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.", reply_markup=get_main_menu_keyboard(user_id=call.from_user.id))
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_main_menu_keyboard(user_id=call.from_user.id))
    await call.answer()

@router.callback_query(F.data == "register")
async def register_callback(call: CallbackQuery, state: FSMContext):
    await register_start(call.message, state)
    await call.answer()

async def main():
    dp.include_router(router)
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"–¢–æ–∫–µ–Ω: {API_TOKEN[:10]}...")
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
